if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# Paketlerin hangileri Bioconductor'dan olduğunu belirt
bioc_pkgs <- c("DESeq2", "airway", "org.Hs.eg.db", "clusterProfiler", "AnnotationDbi", "biomaRt", "pathview")
# Paketleri sırayla kontrol ederek yükle
for (pkg in pkgs) {
if (!requireNamespace(pkg, quietly = TRUE)) {
if (pkg %in% bioc_pkgs) {
BiocManager::install(pkg)
} else {
install.packages(pkg)
}
} else {
message(paste(pkg, "zaten yüklü."))
}
}
library(DESeq2)
library(tidyverse)
library(clusterProfiler)
library(org.Hs.eg.db)  # İnsan verisi için
library(AnnotationDbi)
library(enrichplot)
library(pathview)
library(EnhancedVolcano)
library(readr)
data <- read_tsv("assesment_dataset.tsv")
# Gerekli kütüphaneler
library(DESeq2)
# requirements.txt dosyasını oku
pkgs <- readLines("C:\\Users\\samet\\OneDrive\\Belgeler\\EnformaticsTask\\requirement.txt")
pkgs
# BiocManager yoksa yükle
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# Paketlerin hangileri Bioconductor'dan olduğunu belirt
bioc_pkgs <- c("DESeq2", "airway", "org.Hs.eg.db", "clusterProfiler", "AnnotationDbi", "biomaRt", "pathview")
# Paketleri sırayla kontrol ederek yükle
for (pkg in pkgs) {
if (!requireNamespace(pkg, quietly = TRUE)) {
if (pkg %in% bioc_pkgs) {
BiocManager::install(pkg)
} else {
install.packages(pkg)
}
} else {
message(paste(pkg, "zaten yüklü."))
}
}
# Gerekli kütüphaneler
library(DESeq2)
library(tidyverse)
library(clusterProfiler)
library(org.Hs.eg.db)  # İnsan verisi için
library(AnnotationDbi)
library(enrichplot)
library(pathview)
library(EnhancedVolcano)
library(readr)
data <- read_tsv("assesment_dataset.tsv")
data <- read_tsv("assesment_dataset.tsv")
data
# requirements.txt dosyasını oku
pkgs <- readLines("C:\\Users\\samet\\OneDrive\\Belgeler\\EnformaticsTask\\requirement.txt")
pkgs
# BiocManager yoksa yükle
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# Paketlerin hangileri Bioconductor'dan olduğunu belirt
bioc_pkgs <- c("DESeq2", "airway", "org.Hs.eg.db", "clusterProfiler", "AnnotationDbi", "biomaRt", "pathview")
# Paketleri sırayla kontrol ederek yükle
for (pkg in pkgs) {
if (!requireNamespace(pkg, quietly = TRUE)) {
if (pkg %in% bioc_pkgs) {
BiocManager::install(pkg)
} else {
install.packages(pkg)
}
} else {
message(paste(pkg, "zaten yüklü."))
}
}
# Gerekli kütüphaneler
library(DESeq2)
library(tidyverse)
library(clusterProfiler)
library(org.Hs.eg.db)  # İnsan verisi için
library(AnnotationDbi)
library(enrichplot)
library(pathview)
library(EnhancedVolcano)
library(readr)
data <- read_tsv("assesment_dataset.tsv")
# requirements.txt dosyasını oku
pkgs <- readLines("C:\\Users\\samet\\OneDrive\\Belgeler\\EnformaticsTask\\requirement.txt")
pkgs
# BiocManager yoksa yükle
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# Paketlerin hangileri Bioconductor'dan olduğunu belirt
bioc_pkgs <- c("DESeq2", "airway", "org.Hs.eg.db", "clusterProfiler", "AnnotationDbi", "biomaRt", "pathview")
# Paketleri sırayla kontrol ederek yükle
for (pkg in pkgs) {
if (!requireNamespace(pkg, quietly = TRUE)) {
if (pkg %in% bioc_pkgs) {
BiocManager::install(pkg)
} else {
install.packages(pkg)
}
} else {
message(paste(pkg, "zaten yüklü."))
}
}
# Gerekli kütüphaneler
library(DESeq2)
library(tidyverse)
library(clusterProfiler)
library(org.Hs.eg.db)  # İnsan verisi için
library(AnnotationDbi)
library(enrichplot)
library(pathview)
library(EnhancedVolcano)
library(readr)
data <- read_tsv("assesment_dataset.tsv")
# requirements.txt dosyasını oku
pkgs <- readLines("C:\\Users\\samet\\OneDrive\\Belgeler\\EnformaticsTask\\requirement.txt")
pkgs
# BiocManager yoksa yükle
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# Paketlerin hangileri Bioconductor'dan olduğunu belirt
bioc_pkgs <- c("DESeq2", "airway", "org.Hs.eg.db", "clusterProfiler", "AnnotationDbi", "biomaRt", "pathview")
# Paketleri sırayla kontrol ederek yükle
for (pkg in pkgs) {
if (!requireNamespace(pkg, quietly = TRUE)) {
if (pkg %in% bioc_pkgs) {
BiocManager::install(pkg)
} else {
install.packages(pkg)
}
} else {
message(paste(pkg, "zaten yüklü."))
}
}
# Gerekli kütüphaneler
library(DESeq2)
library(tidyverse)
library(clusterProfiler)
library(org.Hs.eg.db)  # İnsan verisi için
library(AnnotationDbi)
library(enrichplot)
library(pathview)
library(EnhancedVolcano)
library(readr)
print(data)
data <- read_tsv("assesment_dataset.tsv")
data <- read_tsv("assesment_dataset.tsv")
print(data)
converter <- read_tsv("converter.tsv")
converter
# requirements.txt dosyasını oku
pkgs <- readLines("C:\\Users\\samet\\OneDrive\\Belgeler\\EnformaticsTask\\requirement.txt")
pkgs
# BiocManager yoksa yükle
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# Paketlerin hangileri Bioconductor'dan olduğunu belirt
bioc_pkgs <- c("DESeq2", "airway", "org.Hs.eg.db", "clusterProfiler", "AnnotationDbi", "biomaRt", "pathview")
# Paketleri sırayla kontrol ederek yükle
for (pkg in pkgs) {
if (!requireNamespace(pkg, quietly = TRUE)) {
if (pkg %in% bioc_pkgs) {
BiocManager::install(pkg)
} else {
install.packages(pkg)
}
} else {
message(paste(pkg, "zaten yüklü."))
}
}
# Gerekli kütüphaneler
library(DESeq2)
library(tidyverse)
library(clusterProfiler)
library(org.Hs.eg.db)  # İnsan verisi için
library(AnnotationDbi)
library(enrichplot)
library(pathview)
library(EnhancedVolcano)
library(readr)
data <- read_tsv("assesment_dataset.tsv")
# requirements.txt dosyasını oku
pkgs <- readLines("C:\\Users\\samet\\OneDrive\\Belgeler\\EnformaticsTask\\requirement.txt")
pkgs
# BiocManager yoksa yükle
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# Paketlerin hangileri Bioconductor'dan olduğunu belirt
bioc_pkgs <- c("DESeq2", "airway", "org.Hs.eg.db", "clusterProfiler", "AnnotationDbi", "biomaRt", "pathview")
# Paketleri sırayla kontrol ederek yükle
for (pkg in pkgs) {
if (!requireNamespace(pkg, quietly = TRUE)) {
if (pkg %in% bioc_pkgs) {
BiocManager::install(pkg)
} else {
install.packages(pkg)
}
} else {
message(paste(pkg, "zaten yüklü."))
}
}
# Gerekli kütüphaneler
library(DESeq2)
library(tidyverse)
library(clusterProfiler)
library(org.Hs.eg.db)  # İnsan verisi için
library(AnnotationDbi)
library(enrichplot)
library(pathview)
library(EnhancedVolcano)
library(readr)
data <- read_tsv("C:\Users\samet\OneDrive\Belgeler\EnformaticsTask\assesment_dataset.tsv")
# requirements.txt dosyasını oku
pkgs <- readLines("C:\\Users\\samet\\OneDrive\\Belgeler\\EnformaticsTask\\requirement.txt")
pkgs
# BiocManager yoksa yükle
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# Paketlerin hangileri Bioconductor'dan olduğunu belirt
bioc_pkgs <- c("DESeq2", "airway", "org.Hs.eg.db", "clusterProfiler", "AnnotationDbi", "biomaRt", "pathview")
# Paketleri sırayla kontrol ederek yükle
for (pkg in pkgs) {
if (!requireNamespace(pkg, quietly = TRUE)) {
if (pkg %in% bioc_pkgs) {
BiocManager::install(pkg)
} else {
install.packages(pkg)
}
} else {
message(paste(pkg, "zaten yüklü."))
}
}
# Gerekli kütüphaneler
library(DESeq2)
library(tidyverse)
library(clusterProfiler)
library(org.Hs.eg.db)  # İnsan verisi için
library(AnnotationDbi)
library(enrichplot)
library(pathview)
library(EnhancedVolcano)
library(readr)
data <- read_tsv("assesment_dataset.tsv")
library(readr)
data <- read_tsv("assesment_dataset.tsv")
print(data)
converter <- read_tsv("converter.tsv")
converter
# Gerekli kütüphaneler
library(DESeq2)
# Gerekli kütüphaneler
library(DESeq2)
# BiocManager yoksa yükle
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# CRAN'dan gelenler
cran_pkgs <- c("tidyverse", "enrichplot", "readr", "EnhancedVolcano")
for (pkg in cran_pkgs) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
# Bioconductor'dan gelenler
bioc_pkgs <- c("DESeq2", "clusterProfiler", "org.Hs.eg.db", "AnnotationDbi", "pathview")
for (pkg in bioc_pkgs) {
if (!requireNamespace(pkg, quietly = TRUE)) {
BiocManager::install(pkg)
}
}
# Gerekli kütüphaneler
library(DESeq2)
library(tidyverse)
library(clusterProfiler)
library(org.Hs.eg.db)  # İnsan verisi için
library(AnnotationDbi)
library(enrichplot)
library(pathview)
library(EnhancedVolcano)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EnhancedVolcano")
# Gerekli kütüphaneler
library(DESeq2)
library(tidyverse)
library(clusterProfiler)
library(org.Hs.eg.db)  # İnsan verisi için
library(AnnotationDbi)
library(enrichplot)
library(pathview)
library(EnhancedVolcano)
library(readr)
data <- read_tsv("assesment_dataset.tsv")
print(data)
converter <- read_tsv("converter.tsv")
converter
# Gerekli paketler
library(tidyverse)
library(DESeq2)
library(gprofiler2)
library(ggplot2)
# Veri setini yC<kle
counts_data <- read_tsv("assesment_dataset.tsv")
# Gen ID'lerini C'ek
gene_ids <- counts_data$converted_alias
# Gen ID'lerde tekrar edenleri filtrele
counts_data <- counts_data[!duplicated(gene_ids), ]
gene_ids <- counts_data$converted_alias
# Gen ID sC<tununu C'D1kar, geri kalanD1 sayD1m matrisi olarak al
counts_matrix <- counts_data %>% select(-converted_alias)
# DESeq2 iC'in sayD1larD1 tam sayD1ya yuvarla
counts_matrix <- round(counts_matrix)
# SD1fD1r toplamlD1 (hiC'bir C6rnekte ifade edilmeyen) genleri filtrele
filter_mask <- rowSums(counts_matrix) > 0
filtered_counts_matrix <- counts_matrix[filter_mask, ]
filtered_gene_ids <- gene_ids[filter_mask]
# SatD1r isimlerini ata
rownames(filtered_counts_matrix) <- filtered_gene_ids
# SonuC'larD1 yazdD1r
cat("Toplam gen sayD1sD1:", nrow(counts_matrix), "\n")
cat("FiltrelenmiE gen sayD1sD1:", nrow(filtered_counts_matrix), "\n")
# SC<tun isimlerine gC6re gruplar: mock_rep vs sars_cov_rep
sample_names <- colnames(filtered_counts_matrix)
condition_labels <- ifelse(grepl("mock", sample_names), "mock_rep", "sars_cov_rep")
# Meta-veri oluEtur
colData <- data.frame(
condition = factor(condition_labels)
)
rownames(colData) <- sample_names
# DESeq2 veri nesnesini oluEtur
dds <- DESeqDataSetFromMatrix(
countData = filtered_counts_matrix,
colData = colData,
design = ~ condition
)
# Diferansiyel ifade analizini C'alD1EtD1r
dds <- DESeq(dds)
# <--- BURADAN SONRA PCA EKLEMEK MCMKCN
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup = "condition")
# SonuC'larD1 al (sars_cov_rep vs mock_rep karED1laEtD1rmasD1)
res <- results(dds, contrast = c("condition", "sars_cov_rep", "mock_rep"))
# Log2 fold change shrink
resLFC <- lfcShrink(dds, coef = "condition_sars_cov_rep_vs_mock_rep", type = "apeglm")
# SonuC'larD1 bir data frame'e dC6nC<EtC<r ve anlamlD1 olanlarD1 filtrele
res_df <- as.data.frame(res) %>%
rownames_to_column("Geneid") %>%
filter(!is.na(padj), padj < 0.05) %>%
arrange(padj)
# AnlamlD1 genlerin sayD1sD1nD1 ve ilk birkaC' satD1rD1nD1 gC6ster
cat("AnlamlD1 olarak deDiEen gen sayD1sD1 (padj < 0.05):", nrow(res_df), "\n")
head(res_df)
# AnlamlD1 genlerin Ensembl ID listesini al
significant_genes <- res_df$Geneid
# gProfiler ile zenginleEtirme analizi yap
gost_results <- gost(
query = significant_genes,
organism = "hsapiens", # D0nsan verisi iC'in 'hsapiens'
sources = c("GO:BP", "GO:MF", "KEGG", "REAC"), # D0stenen veritabanlarD1
user_threshold = 0.05, # AnlamlD1lD1k eEiDi
correction_method = "g_SCS"
)
# SonuC'larD1 gC6ster (interaktif bir tablo dC6necektir) veya bir data frame olarak al
if (!is.null(gost_results)) {
enrichment_table <- gost_results$result
# Cnemli sC<tunlarD1 seC'ip gC6ster
print(enrichment_table %>% select(query, source, term_id, term_name, p_value, intersection_size))
# SonuC'larD1 bir dosyaya da kaydedebilirsiniz
# write_csv(enrichment_table, "enrichment_results.csv")
} else {
cat("ZenginleEmiE bir terim bulunamadD1.\n")
}
# read_tsv yerine read_csv kullanD1n
converter <- read_csv("converter.tsv")
# SC<tunlarD1 kontrol edin
colnames(converter)
# GeC'erli verileri filtrele ve sadece gerekli sC<tunlarD1 al
converter_clean <- converter %>%
filter(!is.na(converted_alias)) %>%
select(initial_alias, converted_alias)
# AnlamlD1 genlerle eEleEtir
res_df_with_entrez <- res_df %>%
left_join(converter_clean, by = c("Geneid" = "converted_alias")) %>%
filter(!is.na(initial_alias))
# Entrez ID'leri al
entrez_ids <- unique(res_df_with_entrez$initial_alias)
cat("Toplam Entrez ID sayD1sD1:", length(entrez_ids), "\n")
# Entrez ID'leri al
entrez_ids <- unique(res_df_with_entrez$initial_alias)
cat("Toplam Entrez ID sayD1sD1:", length(entrez_ids), "\n")
# KEGG terimlerini filtrele
kegg_terms <- enrichment_table %>%
filter(source == "KEGG") %>%
arrange(p_value)
# En anlamlD1 KEGG yollarD1nD1 yazdD1r
print(kegg_terms %>% select(term_id, term_name, p_value, intersection_size))
# D0lk KEGG yolu iC'in link oluEtur
first_kegg_id <- kegg_terms$term_id[1:5]
cat("KEGG Pathway haritasD1 baDlantD1sD1:\n")
cat(paste0("https://www.genome.jp/dbget-bin/show_pathway?", first_kegg_id, "\n"))
# Gerekli paketler
library(tidyverse)
library(DESeq2)
library(gprofiler2)
library(ggplot2)
# Veri setini yükle
counts_data <- read_tsv("assesment_dataset.tsv")
# Gen ID'lerini çek
gene_ids <- counts_data$converted_alias
# Gen ID'lerde tekrar edenleri filtrele
counts_data <- counts_data[!duplicated(gene_ids), ]
gene_ids <- counts_data$converted_alias
# Gen ID sütununu çıkar, geri kalanı sayım matrisi olarak al
counts_matrix <- counts_data %>% select(-converted_alias)
# DESeq2 için sayıları tam sayıya yuvarla
counts_matrix <- round(counts_matrix)
# Sıfır toplamlı (hiçbir örnekte ifade edilmeyen) genleri filtrele
filter_mask <- rowSums(counts_matrix) > 0
filtered_counts_matrix <- counts_matrix[filter_mask, ]
filtered_gene_ids <- gene_ids[filter_mask]
# Satır isimlerini ata
rownames(filtered_counts_matrix) <- filtered_gene_ids
# Sonuçları yazdır
cat("Toplam gen sayısı:", nrow(counts_matrix), "\n")
cat("Filtrelenmiş gen sayısı:", nrow(filtered_counts_matrix), "\n")
# Sütun isimlerine göre gruplar: mock_rep vs sars_cov_rep
sample_names <- colnames(filtered_counts_matrix)
condition_labels <- ifelse(grepl("mock", sample_names), "mock_rep", "sars_cov_rep")
# Meta-veri oluştur
colData <- data.frame(
condition = factor(condition_labels)
)
rownames(colData) <- sample_names
# DESeq2 veri nesnesini oluştur
dds <- DESeqDataSetFromMatrix(
countData = filtered_counts_matrix,
colData = colData,
design = ~ condition
)
# Diferansiyel ifade analizini çalıştır
dds <- DESeq(dds)
# <--- BURADAN SONRA PCA EKLEMEK MÜMKÜN
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup = "condition")
# Sonuçları al (sars_cov_rep vs mock_rep karşılaştırması)
res <- results(dds, contrast = c("condition", "sars_cov_rep", "mock_rep"))
# Log2 fold change shrink
resLFC <- lfcShrink(dds, coef = "condition_sars_cov_rep_vs_mock_rep", type = "apeglm")
# Sonuçları bir data frame'e dönüştür ve anlamlı olanları filtrele
res_df <- as.data.frame(res) %>%
rownames_to_column("Geneid") %>%
filter(!is.na(padj), padj < 0.05) %>%
arrange(padj)
# Anlamlı genlerin sayısını ve ilk birkaç satırını göster
cat("Anlamlı olarak değişen gen sayısı (padj < 0.05):", nrow(res_df), "\n")
head(res_df)
# Anlamlı genlerin Ensembl ID listesini al
significant_genes <- res_df$Geneid
# gProfiler ile zenginleştirme analizi yap
gost_results <- gost(
query = significant_genes,
organism = "hsapiens", # İnsan verisi için 'hsapiens'
sources = c("GO:BP", "GO:MF", "KEGG", "REAC"), # İstenen veritabanları
user_threshold = 0.05, # Anlamlılık eşiği
correction_method = "g_SCS"
)
# Sonuçları göster (interaktif bir tablo dönecektir) veya bir data frame olarak al
if (!is.null(gost_results)) {
enrichment_table <- gost_results$result
# Önemli sütunları seçip göster
print(enrichment_table %>% select(query, source, term_id, term_name, p_value, intersection_size))
# Sonuçları bir dosyaya da kaydedebilirsiniz
# write_csv(enrichment_table, "enrichment_results.csv")
} else {
cat("Zenginleşmiş bir terim bulunamadı.\n")
}
# read_tsv yerine read_csv kullanın
converter <- read_csv("converter.tsv")
# Sütunları kontrol edin
colnames(converter)
# Geçerli verileri filtrele ve sadece gerekli sütunları al
converter_clean <- converter %>%
filter(!is.na(converted_alias)) %>%
select(initial_alias, converted_alias)
# Anlamlı genlerle eşleştir
res_df_with_entrez <- res_df %>%
left_join(converter_clean, by = c("Geneid" = "converted_alias")) %>%
filter(!is.na(initial_alias))
# Entrez ID'leri al
entrez_ids <- unique(res_df_with_entrez$initial_alias)
cat("Toplam Entrez ID sayısı:", length(entrez_ids), "\n")
# Entrez ID'leri al
entrez_ids <- unique(res_df_with_entrez$initial_alias)
cat("Toplam Entrez ID sayısı:", length(entrez_ids), "\n")
# KEGG terimlerini filtrele
kegg_terms <- enrichment_table %>%
filter(source == "KEGG") %>%
arrange(p_value)
# En anlamlı KEGG yollarını yazdır
print(kegg_terms %>% select(term_id, term_name, p_value, intersection_size))
# İlk KEGG yolu için link oluştur
first_kegg_id <- kegg_terms$term_id[1:5]
cat("KEGG Pathway haritası bağlantısı:\n")
cat(paste0("https://www.genome.jp/dbget-bin/show_pathway?", first_kegg_id, "\n"))
